#!/usr/bin/python

import argparse
import os
import sys
from mx_btrfs.btrfs_usage import BtrfsUsage, BtrfsUsageException

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3


class CheckBtrfsException(Exception):
    def __init__(self, status, msg):
        self.status = status
        self.msg = msg


def get_args():
    parser = argparse.ArgumentParser("Check BTRFS filesystem usage")
    parser.add_argument('-awg', '--allocated-warning-gib', type=int, default=0,
                        help='Exit with WARNING status if less than the specified amount of '
                        'disk space (in GiB) is unallocated')
    parser.add_argument('-acg', '--allocated-critical-gib', type=int, default=0,
                        help='Exit with CRITICAL status if less than the specified amount of '
                        'disk space (in GiB) is unallocated')
    parser.add_argument('-awp', '--allocated-warning-percent', type=int, default=100,
                        help='Exit with WARNING status if more than the specified percent of '
                        'disk space is allocated')
    parser.add_argument('-acp', '--allocated-critical-percent', type=int, default=100,
                        help='Exit with CRITICAL status if more than the specified percent of '
                        'disk space is allocated')
    parser.add_argument('-uwp', '--used-warning-percent', type=int, default=0,
                        help='Exit with WARNING status if less than the specified percent of '
                        'allocated space is actually used')
    parser.add_argument('-ucp', '--used-critical-percent', type=int, default=0,
                        help='Exit with CRITICAL status if less than the specified percent of '
                        'allocated space is actually used')
    parser.add_argument('-map', '--minimal-allocated-percent', type=int, default=25,
                        help='Ignore used percentage if allocated it is below this percentage, '
                        'e.g. in case of an almost empty disk')
    parser.add_argument('-m', '--mountpoint', required=True,
                        help='Path to the BTRFS mountpoint')
    args = parser.parse_args()

    if not os.path.exists(args.mountpoint):
        raise CheckBtrfsException(STATE_CRITICAL,
                                  'BTRFS mountpoint does not exist: %s' % args.mountpoint)

    if not os.access(args.mountpoint, os.R_OK):
        raise CheckBtrfsException(STATE_CRITICAL,
                                  'CRITICAL: Mountpoint is not accessible: %s' %
                                  args.mountpoint)

    if args.allocated_warning_gib < 0:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Allocated GiB warning threshold must be a '
            'positive integer value: %s' % args.allocated_warning_gib)
    if args.allocated_critical_gib < 0:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Allocated GiB critical threshold must be a '
            'positive integer value: %s' % args.allocated_critical_gib)

    if args.allocated_warning_percent < 0 or args.allocated_warning_percent > 100:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Allocated warning percentage must be between '
            '0 and 100 (given: %s)' % args.allocated_warning_percent)
    if args.allocated_critical_percent < 0 or args.allocated_critical_percent > 100:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Allocated critical percentage must be between '
            '0 and 100 (given: %s)' % args.allocated_critical_percent)

    if args.minimal_allocated_percent < 0 or args.minimal_allocated_percent > 100:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Minimal allocated percentage must be between'
            '0 and 100 (given: %s)' % args.minimal_allocated_percent)

    if args.used_warning_percent < 0 or args.used_warning_percent > 100:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Used warning percentage must be between'
            '0 and 100 (given: %s)' % args.used_warning_percent)
    if args.used_critical_percent < 0 or args.used_critical_percent > 100:
        raise CheckBtrfsException(
            STATE_CRITICAL, 'CRITICAL: Used critical percentage must be between'
            '0 and 100 (given: %s)' % args.used_critical_percent)

    return args


def check_usage(total, allocated, used, args):
    warning = False
    critical = False
    msg = []

    unallocated_gib = (total - allocated) / 1073741824
    allocated_pct = (allocated * 100) / total
    used_pct = (used * 100) / allocated

    if args.allocated_critical_gib > unallocated_gib:
        msg.append('Critical: Unallocated left: %s GiB' % unallocated_gib)
        critical = True
    elif args.allocated_warning_gib > unallocated_gib:
        msg.append('Warning: Unallocated left: %s GiB' % unallocated_gib)
        warning = True

    if allocated_pct >= args.allocated_critical_percent:
        msg.append('Critical: Allocated: %s%%' % allocated_pct)
        critical = True
    elif allocated_pct >= args.allocated_warning_percent:
        msg.append('Warning: Allocated: %s%%' % allocated_pct)
        warning = True

    if allocated_pct > args.minimal_allocated_percent:
        if used_pct <= args.used_critical_percent:
            msg.append('Critical: Used: %s%%' % used_pct)
            critical = True
        elif used_pct <= args.used_warning_percent:
            msg.append('Warning: Used: %s%%' % used_pct)
            warning = True
    else:
        if used_pct <= args.used_critical_percent:
            msg.append('Critical: Used: %s%%, ignoring threshold because allocated: %s%% (<%s%%)' %
                       (used_pct, allocated_pct, args.minimal_allocated_percent))
        elif used_pct <= args.used_warning_percent:
            msg.append('Warning: Used: %s%%, ignoring threshold because allocated: %s%% (<%s%%)' %
                       (used_pct, allocated_pct, args.minimal_allocated_percent))

    if critical is True or warning is True:
        print(', '.join(msg))
    else:
        if len(msg) > 0:
            print('BTRFS OK: %s' % ', '.join(msg))
        else:
            print('BTRFS OK')

    print('Total size: %.2f GiB, Allocated: %.2f GiB (%s%%), Used: %.2f GiB (%s%%)'
          % (total / 1073741824.0,
             allocated / 1073741824.0, allocated_pct,
             used / 1073741824.0, used_pct))

    if critical is True:
        return STATE_CRITICAL
    if warning is True:
        return STATE_WARNING
    return STATE_OK


def main():
    try:
        args = get_args()
        usage = BtrfsUsage(args.mountpoint)
        sys.exit(
            check_usage(
                usage.get_total(),
                usage.get_allocated(),
                usage.get_used(),
                args,
            )
        )
    except CheckBtrfsException as cbe:
        print cbe.msg
        sys.exit(cbe.status)
    except BtrfsUsageException as bue:
        print bue.msg
        sys.exit(STATE_CRITICAL)


if __name__ == "__main__":
    main()
